// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO Accounts (
       username,
       password,
       email,
       role
) VALUES (
  $1, $2, $3, $4
) RETURNING username, password, email, role
`

type CreateAccountParams struct {
	Username string      `json:"username"`
	Password []byte      `json:"password"`
	Email    string      `json:"email"`
	Role     AccountRole `json:"role"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Role,
	)
	var i Account
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return &i, err
}

const getAccount = `-- name: GetAccount :one
SELECT username, password, email, role FROM Accounts
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, username string) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, username)
	var i Account
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return &i, err
}
