// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (
       uuid,
       ip,
       os,
       browser
) VALUES (
  $1, $2, $3, $4
) RETURNING uuid, ip, os, browser, account_username
`

type CreateUserParams struct {
	Uuid    string         `json:"uuid"`
	Ip      sql.NullString `json:"ip"`
	Os      sql.NullString `json:"os"`
	Browser sql.NullString `json:"browser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.Ip,
		arg.Os,
		arg.Browser,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Ip,
		&i.Os,
		&i.Browser,
		&i.AccountUsername,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, ip, os, browser, account_username FROM Users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uuid string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Ip,
		&i.Os,
		&i.Browser,
		&i.AccountUsername,
	)
	return &i, err
}

const getUsersByAccount = `-- name: GetUsersByAccount :many
SELECT uuid, ip, os, browser, account_username FROM Users
WHERE account_username = $1
`

func (q *Queries) GetUsersByAccount(ctx context.Context, accountUsername string) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByAccount, accountUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Ip,
			&i.Os,
			&i.Browser,
			&i.AccountUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
