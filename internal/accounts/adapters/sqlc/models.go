// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountRole string

const (
	AccountRoleBasic AccountRole = "basic"
	AccountRoleAdmin AccountRole = "admin"
)

func (e *AccountRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountRole(s)
	case string:
		*e = AccountRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountRole: %T", src)
	}
	return nil
}

type NullAccountRole struct {
	AccountRole AccountRole
	Valid       bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountRole) Scan(value interface{}) error {
	if value == nil {
		ns.AccountRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.AccountRole, nil
}

type Account struct {
	Username          string      `json:"username"`
	Password          []byte      `json:"password"`
	Email             string      `json:"email"`
	Activated         bool        `json:"activated"`
	PasswordChangedAt time.Time   `json:"password_changed_at"`
	Role              AccountRole `json:"role"`
}

type User struct {
	Uuid            string         `json:"uuid"`
	Ip              sql.NullString `json:"ip"`
	Os              sql.NullString `json:"os"`
	Browser         sql.NullString `json:"browser"`
	AccountUsername string         `json:"account_username"`
}
