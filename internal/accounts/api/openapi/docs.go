// Package openapi GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package openapi

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/login": {
            "post": {
                "description": "logs in to account with user provided credantials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs user into the system",
                "parameters": [
                    {
                        "description": "account login credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.loginParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.loginResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "registers new account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Registers user into the system",
                "parameters": [
                    {
                        "description": "register credantials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.registerParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httperr.ErrorResponse": {
            "type": "object",
            "properties": {
                "slug": {
                    "type": "string"
                }
            }
        },
        "ports.accountResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "integer"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        " basic"
                    ]
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.userResponse"
                    }
                }
            }
        },
        "ports.loginParams": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 4
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "ports.loginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "account": {
                    "$ref": "#/definitions/ports.accountResponse"
                },
                "refresh_token": {
                    "type": "string"
                },
                "refresh_token_expires_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ports.registerParams": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "password"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 4
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "ports.userResponse": {
            "type": "object",
            "properties": {
                "browser": {
                    "type": "string"
                },
                "ip": {
                    "type": "string",
                    "format": "ipv4"
                },
                "uuid": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Telegram Subs API",
	Description:      "This service provide functionality for storing and managing privat telegram channels with subscription based payments for acessing content.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
